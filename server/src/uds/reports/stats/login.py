# -*- coding: utf-8 -*-

#
# Copyright (c) 2015 Virtual Cable S.L.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright notice,
#      this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright notice,
#      this list of conditions and the following disclaimer in the documentation
#      and/or other materials provided with the distribution.
#    * Neither the name of Virtual Cable S.L. nor the names of its contributors
#      may be used to endorse or promote products derived from this software
#      without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

'''
.. moduleauthor:: Adolfo GÃ³mez, dkmaster at dkmon dot com
'''
from __future__ import unicode_literals

from django.utils.translation import ugettext, ugettext_noop as _
from uds.core.ui.UserInterface import gui
from uds.core.reports import stock
from uds.models import StatsEvents
import StringIO

from .base import StatsReport

from uds.core.util import tools
from geraldo.generators.pdf import PDFGenerator
from geraldo import Report, landscape, ReportBand, ObjectValue, SystemField, BAND_WIDTH, Label, Image
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import cm
from reportlab.lib.enums import TA_RIGHT, TA_CENTER

import datetime
import logging

logger = logging.getLogger(__name__)

__updated__ = '2015-05-03'


class UsersReport(Report):
    title = 'Test report'
    author = 'UDS Enterprise'

    print_if_empty = True
    page_size = A4
    margin_left = 2 * cm
    margin_top = 0.5 * cm
    margin_right = 0.5 * cm
    margin_bottom = 0.5 * cm

    class band_detail(ReportBand):
        height = 0.5 * cm
        elements = (
            ObjectValue(attribute_name='name', left=0.5 * cm),
            ObjectValue(attribute_name='real_name', left=3 * cm),
            ObjectValue(attribute_name='last_access', left=7 * cm),
        )

    class band_page_header(ReportBand):
        height = 2.0 * cm
        elements = [
            SystemField(expression='%(report_title)s', top=0.5 * cm, left=0, width=BAND_WIDTH,
                        style={'fontName': 'Helvetica-Bold', 'fontSize': 14, 'alignment': TA_CENTER}),

            Label(text="User ID", top=1.5 * cm, left=0.5 * cm),
            Label(text="Real Name", top=1.5 * cm, left=3 * cm),
            Label(text="Last access", top=1.5 * cm, left=7 * cm),
            SystemField(expression=_('Page %(page_number)d of %(page_count)d'), top=0.1 * cm,
                        width=BAND_WIDTH, style={'alignment': TA_RIGHT}),
            Image(filename=stock.getStockImagePath(stock.LOGO), left=0.1 * cm, top=0.0 * cm, width=2 * cm, height=2 * cm),
        ]
        borders = {'bottom': True}

    class band_page_footer(ReportBand):
        height = 0.5 * cm
        elements = [
            Label(text='Generated by UDS', top=0.1 * cm),
            SystemField(expression=_('Printed in %(now:%Y, %b %d)s at %(now:%H:%M)s'), top=0.1 * cm,
                        width=BAND_WIDTH, style={'alignment': TA_RIGHT}),
        ]
        borders = {'top': True}


class StatsReportLogin(StatsReport):
    filename = 'access.pdf'
    name = _('Users list')  # Report name
    description = _('List users of platform')  # Report description
    uuid = '0f62f19a-f166-11e4-8f59-10feed05884b'

    startDate = gui.DateField(
        order=1,
        label=_('Starting date'),
        tooltip=_('starting date for report'),
        defvalue=datetime.date.min,
        required=True
    )

    endDate = gui.DateField(
        order=1,
        label=_('Finish date'),
        tooltip=_('finish date for report'),
        defvalue=datetime.date.max,
        required=True
    )

    def initialize(self, values):
        pass

    def initGui(self):
        pass

    def generate(self):
        # Query:
        #   SELECT count(*) as number, CEIL(stamp/(3600*24*30))*3600*24*30 as stamp
        #   FROM `uds_stats_e`
        #   WHERE `event_type` = 0 and stamp >= 1421888752 and stamp <= 1430638561
        #   GROUP BY CEIL(stamp/(3600*24*30))
        #   ORDER BY stamp

        logger.debug('minDate: {}, maxDate: {}'.format(self.startDate.date(), self.endDate.date()))
        # Graph will have 12 points, no matter where start & end is
        query = (
            'SELECT *, count(*) as number, CEIL(stamp/(3600*24))*3600*24 as block'
            ' FROM {table}'
            ' WHERE event_type = 0 and stamp >= {start} and stamp <= {end}'
            ' GROUP BY CEIL(stamp/(3600*24))'
            ' ORDER BY block'
        ).format(
            start=self.startDate.stamp(),
            end=self.endDate.stamp(),
            table=StatsEvents._meta.db_table,  # @UndefinedVariable
        )

        logger.debug('Query: {}'.format(query))
        data = list(StatsEvents.objects.raw(query))

        logger.debug('StatsEvents: {} -> {}'.format(len(data), data))

        for v in data:
            logger.debug('DATA: {} {}'.format(v.number, datetime.date.fromtimestamp(v.block)))

        # auth = Authenticator.objects.get(uuid=self.authenticator.value)
        # users = auth.users.order_by('name')

        output = StringIO.StringIO()

        # report = UsersReport(queryset=users)
        # report.title = _('Users List for {}').format(auth.name)
        # report.generate_by(PDFGenerator, filename=output)
        return output.getvalue()
